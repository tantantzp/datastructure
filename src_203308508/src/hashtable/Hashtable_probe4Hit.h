/******************************************************************************************
 * Data Structures in C++
 * ISBN: 7-302-26883-3 & 7-302-29652-2
 * Junhui DENG, deng@tsinghua.edu.cn
 * Computer Science & Technology, Tsinghua University
 * Copyright (c) 2011. All rights reserved.
 ******************************************************************************************/

#pragma once

/******************************************************************************************
 * 沿关键码k对应的查找链，找到条目匹配的桶（供查找、删除和插入条目时调用）
 * 返回时，或者查找命中，或抵达查找链末端――无LazyMark标记的空桶
 * 试探算法多种多样，可灵活选取；这里仅以线性试探为例
 ******************************************************************************************/
template <typename K, typename V> int Hashtable<K, V>::probe4Hit(const K & k) {
   int r = hashCode(k) % M; //采用除余法确定首个试探的桶单元地址
   //*DSA*/printf(" ->%d", r);
 // 沿查找链，跳过所有冲突的以及被懒惰删除的桶
   while ((ht[r] && (k != ht[r]->key)) || (!ht[r] && lazilyRemoved(r)) ) {
      r = (r+1) % M; //线性试探（注意并列判断的次序，命中可能性更大者前置）
      //*DSA*/printf(" ->%d", r);
   }
   //*DSA*/printf("\n");
   return r; //调用者根据ht[r]是否为空，即可判断查找是否成功
}
